diff --git a/emulator/vnf.py b/emulator/vnf.py
index 54dc28f..f000103 100644
--- a/emulator/vnf.py
+++ b/emulator/vnf.py
@@ -14,7 +14,6 @@ Forwarding VNF via packet socket.
 import numpy as np
 import pickle
 import time
-import psutil
 from picautils.icanetwork import icanetwork
 from picautils.icabuffer import ICABuffer
 from picautils.packetutils import *
@@ -67,8 +66,8 @@ def main(simplecoin: SimpleCOIN.IPC, af_packet: bytes):
                     init_settings, (packet['IP_dst'], packet['Port_dst']),))
             else:
                 print('*** vnf transmit init_settings!')
-            simplecoin.forward(af_packet)
-            simplecoin.submit_func(pid=0, id='measure@time_start')
+                simplecoin.forward(af_packet)
+                simplecoin.submit_func(pid=0, id='measure@time_start')
             EVAL_MODE = init_settings['mode']
         elif header == HEADER_DATA or header == HEADER_FINISH:
             # ####################################
@@ -103,7 +102,7 @@ def write_results(simplecoin: SimpleCOIN.IPC, EVAL_MODE, W):
     print('*** write reults')
     if EVALS[1] == 'cf':
         if len(EVALS) <= 4:
-            EVALS += ['process_time', 0, 'cpu_usage', 0, 'mem_usage', 0]
+            EVALS += ['matrix_w_pre', measure_arr_to_jsonstr(W), 'process_time', 0, 'matrix_w', measure_arr_to_jsonstr(W)]
         measure_write(IFCE_NAME+'_'+init_settings['mode'], EVALS)
 
 
@@ -132,6 +131,7 @@ def ica_buf_put(simplecoin: SimpleCOIN.IPC, data):
         ica_buf.put(data)
         if ica_buf.size() >= init_settings['proc_len'] or ica_buf.size() >= init_settings['m']:
             simplecoin.submit_func(pid=-1, id='pica_service')
+
 # the function app.func('xxx') will create a new thread to run the function
 
 
@@ -155,39 +155,30 @@ def pica_service(simplecoin: SimpleCOIN.IPC):
                 print('*** vnf pica processing!')
                 # Measurements begin.
                 time_start = time.time()
-                process = psutil.Process()
-                cpu_percent_start = process.cpu_percent()
-                mem_info_start = process.memory_info()
                 icanetwork.pica_nw(init_settings, ica_buf)
-                cpu_percent_end = process.cpu_percent()
-                mem_info_end = process.memory_info()
                 time_finish = time.time()
                 # Measurements end.
                 # Measurements begin.
-                EVALS += ['time_start', time_start,
-                          'process_time', time_finish - time_start,
-                          'cpu_usage', cpu_percent_end,
-                          'mem_usage', mem_info_end.rss]
+                EVALS += ['time_start', time_start, 'matrix_w_pre', measure_arr_to_jsonstr(W_pre),
+                          'process_time', time_finish - time_start]
+                EVALS += ['matrix_w',
+                          measure_arr_to_jsonstr(init_settings['W'])]
                 # Measurements end.
                 init_settings['node_max_ext_nums'][0] -= 1
             elif ica_buf.size() >= init_settings['m']:
                 # break
                 W_pre = init_settings['W']
-                print('*** vnf fastica processing!')
+                print('*** vnf pica processing!')
                 # Measurements begin.
                 time_start = time.time()
-                cpu_percent_start = process.cpu_percent()
-                mem_info_start = process.memory_info()
                 icanetwork.fastica_nw(init_settings, ica_buf)
-                cpu_percent_end = process.cpu_percent()
-                mem_info_end = process.memory_info()
                 time_finish = time.time()
                 # Measurements end.
                 # Measurements begin.
-                EVALS += ['time_start', time_start,
-                          'process_time', time_finish - time_start,
-                          'cpu_usage', cpu_percent_end,
-                          'mem_usage', mem_info_end.rss]
+                EVALS += ['time_start', time_start, 'matrix_w_pre', measure_arr_to_jsonstr(W_pre),
+                          'process_time', time_finish - time_start]
+                EVALS += ['matrix_w',
+                          measure_arr_to_jsonstr(init_settings['W'])]
                 # Measurements end.
                 init_settings['node_max_ext_nums'][0] -= 1
                 init_settings['is_finish'] = True
